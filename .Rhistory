if (!all(ev >= -tol * abs(ev[1L])))
stop("'Sigma' is not positive definite")
X <- matrix(rnorm(p * n), n)
if (empirical) {
X <- scale(X, TRUE, FALSE)
X <- X %*% svd(X, nu = 0, nv = length(mu))$v
X <- scale(X, FALSE, TRUE)
}
X <- drop(mu) + eS$vectors %*% diag(sqrt(pmax(ev, 0)), p) %*%
t(X)
return(t(X))
}
normd <- myrmvnorm(n, rep(0, d), Sigma = Cor)
myrmvnorm<-function (n = 100, mu = rep(0, 10), Sigma = diag(10), tol = 1e-06,
empirical = TRUE)
{
p <- length(mu)
if (!all(dim(Sigma) == c(p, p)))
stop("incompatible arguments")
eS <- eigen(Sigma, symmetric = TRUE)
ev <- eS$values
if (!all(ev >= -tol * abs(ev[1L])))
stop("'Sigma' is not positive definite")
X <- matrix(rnorm(p * n), n)
if (empirical) {
X <- scale(X, TRUE, FALSE)
X <- X %*% svd(X, nu = 0, nv = length(mu))$v
X <- scale(X, FALSE, TRUE)
}
X <- drop(mu) + eS$vectors %*% diag(sqrt(pmax(ev, 0)), p) %*%
t(X)
return(t(X))
}
normd <- myrmvnorm(n, rep(0, d), Sigma = Cor)
normd <- myrmvnorm(n, rep(0, 5), Sigma = Cor)
library(SpiecEasi)
total_train_sample = as.matrix(read.table("D:\\TestData\\obedata.txt"))
total_train_label = as.matrix(read.table("D:\\TestData\\testlabel.txt"))
class0 <- total_train_sample[total_train_label[,1] == 1, ];
class1 <- total_train_sample[total_train_label[,1] == 0, ];
percentage <- c(2.0,3.0)
for (i in 1:length(percentage)){
# browser()
print(i)
n_class0 <- round(nrow(class0)*percentage[i])
n_class1 <- round(nrow(class1)*percentage[i])
X0 <- synth_comm_from_counts(class0, mar=2, distr='negbin',  n=n_class0 )
X1 <- synth_comm_from_counts(class1, mar=2, distr='negbin',  n=n_class1 )
X <- rbind(X0, X1);
label0 <- matrix(0, n_class0, 1);
label1 <- matrix(1, n_class1, 1);
#matrix(a,b,c) 建立一个全是数字a的矩阵，b行c列
labels <- rbind(label0, label1);
sample_file <- paste("D:\\TestData\\nbSample", "_4_", round(percentage[i]), ".txt", sep = "");
label_file <- paste("D:\\TestData\\nbLabel", "_4_", round(percentage[i]), ".txt", sep = "");
write.table(X, sample_file, sep="\t", row.names = F, col.names = F)
write.table(labels, label_file, sep="\t", row.names = F, col.names = F)
}
library(SpiecEasi)
total_train_sample = as.matrix(read.table("D:\\TestData\\obedata.txt"))
total_train_label = as.matrix(read.table("D:\\TestData\\testlabel.txt"))
class0 <- total_train_sample[total_train_label[,1] == 1, ];
class1 <- total_train_sample[total_train_label[,1] == 0, ];
percentage <- c(2.0,3.0)
for (i in 1:length(percentage)){
# browser()
print(i)
n_class0 <- round(nrow(class0)*percentage[i])
n_class1 <- round(nrow(class1)*percentage[i])
X0 <- synth_comm_from_counts(class0, mar=2, distr='negbin',  n=n_class0 )
X1 <- synth_comm_from_counts(class1, mar=2, distr='negbin',  n=n_class1 )
X <- rbind(X0, X1);
label0 <- matrix(0, n_class0, 1);
label1 <- matrix(1, n_class1, 1);
#matrix(a,b,c) 建立一个全是数字a的矩阵，b行c列
labels <- rbind(label0, label1);
sample_file <- paste("D:\\TestData\\nbSample", "_4_", round(percentage[i]), ".txt", sep = "");
label_file <- paste("D:\\TestData\\nbLabel", "_4_", round(percentage[i]), ".txt", sep = "");
write.table(X, sample_file, sep="\t", row.names = F, col.names = F)
write.table(labels, label_file, sep="\t", row.names = F, col.names = F)
}
library(SpiecEasi)
traindata = as.matrix(read.table("D:\\TestData\\testdata.txt"))
i=2
target <- round(nrow(traindata)*i)
nbeddata <- synth_comm_from_counts(traindata, mar=2,distr='negbin',    n=target )
sample_file <- paste("D:\\TestData\\nbobedata_",  round(i), ".txt", sep = "");
write.table(nbeddata, sample_file, sep="\t", row.names = F, col.names = F)
library(SpiecEasi)
traindata = as.matrix(read.table("D:\\TestData\\testdata.txt"))
i=2
target <- round(nrow(traindata)*i)
nbeddata <- synth_comm_from_counts(traindata, mar=2,distr='negbin',    n=target )
sample_file <- paste("D:\\TestData\\nbtestdata_",  round(i), ".txt", sep = "");
write.table(nbeddata, sample_file, sep="\t", row.names = F, col.names = F)
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("splatter")
library(splatter)
install ggplot2
install.packages('ggplot2')
install.packages("ggplot2")
library(splatter)
library(scater)
install.packages("Rcpp")
library(scater)
#create mock data
set.seed(1)
sce<-mockSCE()
library(splatter)
library(scater)
#create mock data
set.seed(1)
sce<-mockSCE()
function names()
install.packages("package name")
library(splatter)
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("splatter")
library(scater)
install.packages('ggplot2')
install.packages("ggplot2")
install.packages("scater")
library(scater)
install.packages("DelayedArray")
install.packages("DelayedArray")
library(splatter)
library(scater)
#create mock data
set.seed(1)
sce<-mockSCE()
View(sce)
class1 <- total_train_sample[total_train_label[,1] == 0, ];
percentage <- c(2.0,3.0)
for (i in 1:length(percentage)){
# browser()
print(i)
n_class0 <- round(nrow(class0)*percentage[i])
n_class1 <- round(nrow(class1)*percentage[i])
n_class0 <- round(nrow(class0)*percentage[i])
library(SpiecEasi)
aw d
library(SpiecEasi)
library(SpiecEasi)
library(SpiecEasi)
library(SpiecEasi)
install.packages("D:\\augdata\\SpiecEasi-1.1.0.tar.gz",repos=NULL,type="source")
library(SpiecEasi)
library(SpiecEasi)
installed.packages()
install.packages("D:/augdata/SpiecEasi-1.1.0.tar.gz", repos = NULL, type = "source")
remove.packages(SpiecEasi)
remove.packages('SpiecEasi')
library(SpiecEasi)
library(SpiecEasi)
install.packages("D:/augdata/SpiecEasi-1.1.0.tar.gz", repos = NULL, type = "source")
install.packages("D:/augdata/SpiecEasi-1.1.0.tar.gz", repos = NULL, type = "source")
install.packages('huge')
install.packages('pulsar')
install.packages('VGAM')
install.packages('GLMNET')
install.packages('glmnet')
install.packages('Rcpp')
install.packages('RcppArmadillo')
install.packages("D:/augdata/SpiecEasi-1.1.0.tar.gz", repos = NULL, type = "source")
install.packages("D:/augdata/SpiecEasi-1.1.0.zip", repos = NULL, type = "win.binary")
library(SpiecEasi)
install.packages("D:/augdata/SpiecEasi-1.1.0.zip", repos = NULL, type = "win.binary")
install.packages("D:/augdata/SpiecEasi-1.1.0.tar.gz", repos = NULL, type = "source")
install.packages("D:/augdata/SpiecEasi-1.1.0.tar (1).gz", repos = NULL)
install.packages("D:/augdata/SpiecEasi-1.1.0.tar.gz", repos = NULL, type = "source")
install.packages("D:/augdata/SpiecEasi-1.1.0.tar.gz", repos = NULL, type = "binary")
install.packages("D:/augdata/SpiecEasi-1.1.0.zip", repos = NULL, type = "win.binary")
install.packages("D:/augdata/SpiecEasi-1.1.0.zip", repos = NULL, type = "win.binary")
install.packages("D:/augdata/SpiecEasi-1.1.0.tar.gz", repos = NULL, type = "source")
install.packages("D:/augdata/SpiecEasi-1.1.0.tar.gz", repos = NULL, type = "source")
install.packages("installr")
install.packages("stringr")
library(stringr) library(installr)
library(stringr)
install.Rtools()
library(devtools)
install.packages('devtools')
install_github("zdk123/SpiecEasi")
library(devtools)
library(devtools)
library(SpiecEasi)
library(SpiecEasi)
install.packages('devtools')
library(devtools)
install.packages('devtools')
library(devtools)
install.packages('rlang')
library(devtools)
library(SpiecEasi)
install_github("zdk123/SpiecEasi")
library(devtools)
install.packages('devtools')
library(devtools)
library(SpiecEasi)
library(SpiecEasi)
path="E:\\augdata"
setwd(path)
source('mysynfun.R')
source('myrmvnegbin.R')
source('myget_comm_params.R')
source('myfitdistr.R')
source('myrmvnorm.R')
rawdata = as.matrix(read.table("E:\\augdata\\testdata.txt"))
multiple=2
target=multiple*nrow(rawdata)
syndata=mysynfun(rawdata,mar=2,distr='negbin',  n=target)
savefile <- paste("E:\\augdata\\nbtest",  round(multiple), ".txt", sep = "");
write.table(syndata, savefile, sep="\t", row.names = F, col.names = F)
install.packages("D:/augdata/SpiecEasi-1.1.0.tar.gz", repos = NULL, type = "source")
install.packages('huge')
install.packages('pulsar')
install.packages('VGAM')
install.packages('glmnet')
install.packages('Rcpp')
install.packages('RcppArmadillo')
library(huge)
library(pulsar)
library(VGAM)
install.packages('stats4')
install.packages("stats4")
install.packages("splines")
library(VGAM)
install.packages('stats4')
install.packages("stats4")
library(VGAM)
install.packages('VGAM')
library(VGAM)
install.packages('stats4')
install.packages("stats4")
library(SpiecEasi)
# getwd()
#path="E:\\augdata"
#setwd(path)
setwd("F:/augdata")
source('mysynfun.R')
source('myrmvnegbin.R')
source('myget_comm_params.R')
source('myfitdistr.R')
source('myrmvnorm.R')
source('myfixInf.R')
source('myrmvpois.R')
# rawdata = as.matrix(read.table("D:\\augdata\\leandata.txt"))
#
#
# multiple=2
# target=multiple*nrow(rawdata)
#
# syndata=mysynfun(rawdata,mar=2,distr='negbin',  n=target)
# #syndata=synth_comm_from_counts(rawdata,mar=2,distr='negbin',  n=target)
#
#
#
# savefile <- paste("D:\\augdata\\nblean",  round(multiple), ".txt", sep = "");
#
# write.table(syndata, savefile, sep="\t", row.names = F, col.names = F)
total_train_sample = as.matrix(read.table("D:\\augdata\\rawdata\\obe_raw_data.txt"))
total_train_label = as.matrix(read.table("D:\\augdata\\rawdata\\obe_raw_label.txt"))
class0 <- total_train_sample[total_train_label[,1] == 1, ];
class1 <- total_train_sample[total_train_label[,1] == 0, ];
multiple <- c(1)
for (i in 1:length(multiple)){
n_class0 <- round(nrow(class0)*multiple[i])
n_class1 <- round(nrow(class1)*multiple[i])
X0 <- mysynfun(class0, mar=2, distr='negbin',  n=n_class0 )
X1 <- mysynfun(class1, mar=2, distr='negbin',  n=n_class1 )
X <- rbind(X0, X1);
label0 <- matrix(0, n_class0, 1);
label1 <- matrix(1, n_class1, 1);
labels <- rbind(label0, label1);
sample_file <- paste("D:\\augdata\\results\\nb_obe_data_",  multiple[i], ".txt", sep = "");
label_file <- paste("D:\\augdata\\results\\nb_obe_label_",  multiple[i], ".txt", sep = "");
write.table(X, sample_file, sep="\t", row.names = F, col.names = F)
write.table(labels, label_file, sep="\t", row.names = F, col.names = F)
}
# synth_comm_from_counts
library(SpiecEasi)
# getwd()
#path="E:\\augdata"
#setwd(path)
setwd("F:/augdata")
source('mysynfun.R')
source('myrmvnegbin.R')
source('myget_comm_params.R')
source('myfitdistr.R')
source('myrmvnorm.R')
source('myfixInf.R')
source('myrmvpois.R')
# rawdata = as.matrix(read.table("D:\\augdata\\leandata.txt"))
#
#
# multiple=2
# target=multiple*nrow(rawdata)
#
# syndata=mysynfun(rawdata,mar=2,distr='negbin',  n=target)
# #syndata=synth_comm_from_counts(rawdata,mar=2,distr='negbin',  n=target)
#
#
#
# savefile <- paste("D:\\augdata\\nblean",  round(multiple), ".txt", sep = "");
#
# write.table(syndata, savefile, sep="\t", row.names = F, col.names = F)
total_train_sample = as.matrix(read.table("D:\\augdata\\rawdata\\cirr_raw_data.txt"))
total_train_label = as.matrix(read.table("D:\\augdata\\rawdata\\cirr_raw_label.txt"))
class0 <- total_train_sample[total_train_label[,1] == 1, ];
class1 <- total_train_sample[total_train_label[,1] == 0, ];
multiple <- c(1)
for (i in 1:length(multiple)){
n_class0 <- round(nrow(class0)*multiple[i])
n_class1 <- round(nrow(class1)*multiple[i])
X0 <- mysynfun(class0, mar=2, distr='negbin',  n=n_class0 )
X1 <- mysynfun(class1, mar=2, distr='negbin',  n=n_class1 )
X <- rbind(X0, X1);
label0 <- matrix(0, n_class0, 1);
label1 <- matrix(1, n_class1, 1);
labels <- rbind(label0, label1);
sample_file <- paste("D:\\augdata\\results\\nb_cirr_data_",  multiple[i], ".txt", sep = "");
label_file <- paste("D:\\augdata\\results\\nb_cirr_label_",  multiple[i], ".txt", sep = "");
write.table(X, sample_file, sep="\t", row.names = F, col.names = F)
write.table(labels, label_file, sep="\t", row.names = F, col.names = F)
}
# synth_comm_from_counts
library(SpiecEasi)
# getwd()
#path="E:\\augdata"
#setwd(path)
setwd("F:/augdata")
source('mysynfun.R')
source('myrmvnegbin.R')
source('myget_comm_params.R')
source('myfitdistr.R')
source('myrmvnorm.R')
source('myfixInf.R')
source('myrmvpois.R')
# rawdata = as.matrix(read.table("D:\\augdata\\leandata.txt"))
#
#
# multiple=2
# target=multiple*nrow(rawdata)
#
# syndata=mysynfun(rawdata,mar=2,distr='negbin',  n=target)
# #syndata=synth_comm_from_counts(rawdata,mar=2,distr='negbin',  n=target)
#
#
#
# savefile <- paste("D:\\augdata\\nblean",  round(multiple), ".txt", sep = "");
#
# write.table(syndata, savefile, sep="\t", row.names = F, col.names = F)
total_train_sample = as.matrix(read.table("D:\\augdata\\rawdata\\t2d_raw_data.txt"))
total_train_label = as.matrix(read.table("D:\\augdata\\rawdata\\t2d_raw_label.txt"))
class0 <- total_train_sample[total_train_label[,1] == 1, ];
class1 <- total_train_sample[total_train_label[,1] == 0, ];
multiple <- c(1)
for (i in 1:length(multiple)){
n_class0 <- round(nrow(class0)*multiple[i])
n_class1 <- round(nrow(class1)*multiple[i])
X0 <- mysynfun(class0, mar=2, distr='negbin',  n=n_class0 )
X1 <- mysynfun(class1, mar=2, distr='negbin',  n=n_class1 )
X <- rbind(X0, X1);
label0 <- matrix(0, n_class0, 1);
label1 <- matrix(1, n_class1, 1);
labels <- rbind(label0, label1);
sample_file <- paste("D:\\augdata\\results\\nb_t2d_data_",  multiple[i], ".txt", sep = "");
label_file <- paste("D:\\augdata\\results\\nb_t2d_label_",  multiple[i], ".txt", sep = "");
write.table(X, sample_file, sep="\t", row.names = F, col.names = F)
write.table(labels, label_file, sep="\t", row.names = F, col.names = F)
}
# synth_comm_from_counts
library(SpiecEasi)
# getwd()
#path="E:\\augdata"
#setwd(path)
setwd("F:/augdata")
source('mysynfun.R')
source('myrmvnegbin.R')
source('myget_comm_params.R')
source('myfitdistr.R')
source('myrmvnorm.R')
source('myfixInf.R')
source('myrmvpois.R')
# rawdata = as.matrix(read.table("D:\\augdata\\leandata.txt"))
#
#
# multiple=2
# target=multiple*nrow(rawdata)
#
# syndata=mysynfun(rawdata,mar=2,distr='negbin',  n=target)
# #syndata=synth_comm_from_counts(rawdata,mar=2,distr='negbin',  n=target)
#
#
#
# savefile <- paste("D:\\augdata\\nblean",  round(multiple), ".txt", sep = "");
#
# write.table(syndata, savefile, sep="\t", row.names = F, col.names = F)
total_train_sample = as.matrix(read.table("D:\\augdata\\rawdata\\cirr_raw_data.txt"))
total_train_label = as.matrix(read.table("D:\\augdata\\rawdata\\cirr_raw_label.txt"))
class0 <- total_train_sample[total_train_label[,1] == 1, ];
class1 <- total_train_sample[total_train_label[,1] == 0, ];
multiple <- c(1)
for (i in 1:length(multiple)){
n_class0 <- round(nrow(class0)*multiple[i])
n_class1 <- round(nrow(class1)*multiple[i])
X0 <- mysynfun(class0, mar=2, distr='pois',  n=n_class0 )
X1 <- mysynfun(class1, mar=2, distr='pois',  n=n_class1 )
X <- rbind(X0, X1);
label0 <- matrix(0, n_class0, 1);
label1 <- matrix(1, n_class1, 1);
labels <- rbind(label0, label1);
sample_file <- paste("D:\\augdata\\results\\pois_cirr_data_",  multiple[i], ".txt", sep = "");
label_file <- paste("D:\\augdata\\results\\pois_cirr_label_",  multiple[i], ".txt", sep = "");
write.table(X, sample_file, sep="\t", row.names = F, col.names = F)
write.table(labels, label_file, sep="\t", row.names = F, col.names = F)
}
# synth_comm_from_counts
library(SpiecEasi)
# getwd()
#path="E:\\augdata"
#setwd(path)
setwd("F:/augdata")
source('mysynfun.R')
source('myrmvnegbin.R')
source('myget_comm_params.R')
source('myfitdistr.R')
source('myrmvnorm.R')
source('myfixInf.R')
source('myrmvpois.R')
# rawdata = as.matrix(read.table("D:\\augdata\\leandata.txt"))
#
#
# multiple=2
# target=multiple*nrow(rawdata)
#
# syndata=mysynfun(rawdata,mar=2,distr='negbin',  n=target)
# #syndata=synth_comm_from_counts(rawdata,mar=2,distr='negbin',  n=target)
#
#
#
# savefile <- paste("D:\\augdata\\nblean",  round(multiple), ".txt", sep = "");
#
# write.table(syndata, savefile, sep="\t", row.names = F, col.names = F)
total_train_sample = as.matrix(read.table("D:\\augdata\\rawdata\\obe_raw_data.txt"))
total_train_label = as.matrix(read.table("D:\\augdata\\rawdata\\obe_raw_label.txt"))
class0 <- total_train_sample[total_train_label[,1] == 1, ];
class1 <- total_train_sample[total_train_label[,1] == 0, ];
multiple <- c(1)
for (i in 1:length(multiple)){
n_class0 <- round(nrow(class0)*multiple[i])
n_class1 <- round(nrow(class1)*multiple[i])
X0 <- mysynfun(class0, mar=2, distr='pois',  n=n_class0 )
X1 <- mysynfun(class1, mar=2, distr='pois',  n=n_class1 )
X <- rbind(X0, X1);
label0 <- matrix(0, n_class0, 1);
label1 <- matrix(1, n_class1, 1);
labels <- rbind(label0, label1);
sample_file <- paste("D:\\augdata\\results\\pois_obe_data_",  multiple[i], ".txt", sep = "");
label_file <- paste("D:\\augdata\\results\\pois_obe_label_",  multiple[i], ".txt", sep = "");
write.table(X, sample_file, sep="\t", row.names = F, col.names = F)
write.table(labels, label_file, sep="\t", row.names = F, col.names = F)
}
# synth_comm_from_counts
library(SpiecEasi)
# getwd()
#path="E:\\augdata"
#setwd(path)
setwd("F:/augdata")
source('mysynfun.R')
source('myrmvnegbin.R')
source('myget_comm_params.R')
source('myfitdistr.R')
source('myrmvnorm.R')
source('myfixInf.R')
source('myrmvpois.R')
# rawdata = as.matrix(read.table("D:\\augdata\\leandata.txt"))
#
#
# multiple=2
# target=multiple*nrow(rawdata)
#
# syndata=mysynfun(rawdata,mar=2,distr='negbin',  n=target)
# #syndata=synth_comm_from_counts(rawdata,mar=2,distr='negbin',  n=target)
#
#
#
# savefile <- paste("D:\\augdata\\nblean",  round(multiple), ".txt", sep = "");
#
# write.table(syndata, savefile, sep="\t", row.names = F, col.names = F)
total_train_sample = as.matrix(read.table("D:\\augdata\\rawdata\\t2d_raw_data.txt"))
total_train_label = as.matrix(read.table("D:\\augdata\\rawdata\\t2d_raw_label.txt"))
class0 <- total_train_sample[total_train_label[,1] == 1, ];
class1 <- total_train_sample[total_train_label[,1] == 0, ];
multiple <- c(1)
for (i in 1:length(multiple)){
n_class0 <- round(nrow(class0)*multiple[i])
n_class1 <- round(nrow(class1)*multiple[i])
X0 <- mysynfun(class0, mar=2, distr='pois',  n=n_class0 )
X1 <- mysynfun(class1, mar=2, distr='pois',  n=n_class1 )
X <- rbind(X0, X1);
label0 <- matrix(0, n_class0, 1);
label1 <- matrix(1, n_class1, 1);
labels <- rbind(label0, label1);
sample_file <- paste("D:\\augdata\\results\\pois_t2d_data_",  multiple[i], ".txt", sep = "");
label_file <- paste("D:\\augdata\\results\\pois_t2d_label_",  multiple[i], ".txt", sep = "");
write.table(X, sample_file, sep="\t", row.names = F, col.names = F)
write.table(labels, label_file, sep="\t", row.names = F, col.names = F)
}
# synth_comm_from_counts
